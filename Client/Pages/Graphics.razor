@page "/graphics"

@using SkiaSharp
@using SkiaSharp.Views.Blazor
@using Microsoft.Maui.Graphics.Skia
@using Microsoft.Maui.Graphics

<PageTitle>Maui.Graphics Paint Example</PageTitle>

<h1>Maui Paint</h1>

<p>Click and drag in the canvas to paint.</p>

<p>
    <button @onclick="@HandleClear">Clear</button>
</p>

<div id="drawing_canvas_container" style="background-color:white;flex:1">
    <SKCanvasView id="drawing_canvas" @ref="_skiaCanvas" OnPaintSurface="@OnPaintSurface" style="position:absolute; border: solid" 
        @onmousedown="HandleMouseDown" 
        @onmouseup="HandleMouseUp" 
        @onmousemove="HandleMouseMove" 
        @onmouseout="HandleMouseOut"
        @onpointerdown="HandlePointerDown"/>
</div>

@code 
{
    SKCanvasView _skiaCanvas = null!;
    SkiaCanvas _mauiGraphicsCanvas = new SkiaCanvas();
    bool _mouseDown = false;
    List<List<PointF>> _points = new List<List<PointF>>();
    Color _color = Colors.Green;

    void OnPaintSurface(SKPaintSurfaceEventArgs e)
    { 
        // Get the Skia canvas and clear it
        var canvas = e.Surface.Canvas;
        canvas.Clear(SKColors.Transparent);

        // Let the Maui.Graphics canvas know which underlying SkCanvas to draw to.
        _mauiGraphicsCanvas.Canvas = canvas;

        // Actually do the drawing with the Maui.Graphics API.
        _mauiGraphicsCanvas.StrokeColor = _color;

        if (_points.Count > 0)
        {
            foreach (var pointList in _points)
            {
                if (pointList.Count > 1)
                {
                    var start = pointList[0];
                    for (int i = 1; i < pointList.Count;i++)
                    {
                        var end = pointList[i];
                        _mauiGraphicsCanvas.DrawLine(start, end);
                        start = end;
                    }
                }
            }
        }

    }

    private void HandleMouseDown(MouseEventArgs evt)
    {
        _mouseDown = true;
        var points = new List<PointF>();
        points.Add(GetPoint(evt));
        _points.Add(points);
        _skiaCanvas.Invalidate();
    }

    /// <summary>
    /// Create a Maui.Graphics point from the mouse event.
    /// </summary>
    /// <param name="evt"></param>
    /// <returns></returns>
    private PointF GetPoint(MouseEventArgs evt)
    {
        return new PointF((float)evt.OffsetX, (float)evt.OffsetY);
    }

    private void HandleMouseUp(MouseEventArgs evt)
    {
        if (!_mouseDown)
            return;

        var point = GetPoint(evt);
        _points[^1].Add(point);
        _skiaCanvas.Invalidate();

        _mouseDown = false;
    }

    private void HandleMouseMove(MouseEventArgs evt)
    {
        if (!_mouseDown)
            return;

        var point = GetPoint(evt);
        _points[^1].Add(point);
        _skiaCanvas.Invalidate();
    }

    private void HandleMouseOut(MouseEventArgs evt)
    {
        if (!_mouseDown)
            return;

        var point = GetPoint(evt);
        _points[^1].Add(point);
        _skiaCanvas.Invalidate();

        _mouseDown = false;
    }

    private void HandlePointerDown(PointerEventArgs evt)
    {
        if (!_mouseDown)
            return;

        var point = GetPoint(evt);
        _points[^1].Add(point);
        _skiaCanvas.Invalidate();
    }

    /// <summary>
    /// Clear the drawing canvas
    /// </summary>
    private void HandleClear()
    {
        _points.Clear();
        _skiaCanvas.Invalidate();
    }
}
